package Formatter;

import java.util.Map;
import java.util.TreeMap;

public class Format {
    private static String size;
    private static String name;
    private static String hash;
    private static String score;
    private static String threats;
    private static String categories;
    private static String labels;
    protected static TreeMap<String, String> AVs = new TreeMap<>();
    protected static StringBuilder report = new StringBuilder();
    public static String format(String text){
        if(!text.contains("Popular threat label") ||
           !text.contains("Threat categories") ||
           !text.contains("Family labels")){
            return advancedSearch(text);
        }
        Format.score = getScore(text);
        report.append("Score: ").append(score).append("\n");
        text = cleanTillHash(text);      // --> 1st Clean, Till Hash
        Format.hash = getHash(text);
        report.append("Hash: ").append(hash).append("\n");
        Format.name = getName(text);
        report.append("Name: ").append(name).append("\n");
        Format.size = getSize(text);
        report.append("Size: ").append(size).append("\n");
        text = getReport(text);          // --> 2nd Clean, Till Popular Threats
        Format.threats = getThreats(text);
        report.append("Threats: ").append(threats.trim()).append("\n");
        Format.categories = getCategories(text);
        report.append("Categories: ").append(categories.trim()).append("\n");
        Format.labels = getLabels(text);
        report.append("Labels: ").append(labels.trim()).append("\n");
        text = getDetections(text);      // --> 3rd Clean, AVs start!!!
        AVs = getAVs(text);
        report.append("\n");
        report.append("Detections...");
        report.append("\n");
        for (Map.Entry<String, String> entry: AVs.entrySet()){
            report.append(entry.getKey()).append(" ").append("- ")
                    .append(entry.getValue()).append("\n");
        }
        return report.toString();
    }
    private static String getScore(String text){
        return text.split("\\n")[4];
    }
    private static String getHash(String text){
        return text.split("\\n")[0];
    }
    private static String getName(String text){ return text.split("\\n")[1]; }
    private static String getSize(String text){return text.split("\\n")[3];}
    private static String cleanTillHash(String text){
        return text.substring(text.indexOf("Learn how to automate via API") +
                "Learn how to automate via API".length()).replaceFirst("\\n",
                "");
    }
    private static String getReport(String text){
        return text.substring(text.indexOf("Popular threat label"));
    }
    private static String getThreats(String text){
        return text.substring(text.indexOf("Popular threat label") +
                        "Popular threat label".length(),
                text.indexOf("Threat categories")
        ).replaceFirst("\\n", "");
    }
    private static String getCategories(String text){
        return text.substring(text.indexOf("Threat categories") +
                        "Threat categories".length(),
                text.indexOf("Family labels")
        ).replaceFirst("\\n", "");
    }
    private static String getLabels(String text){
        if (!text.contains("Popular threat label") ||
                !text.contains("Threat categories") ||
                !text.contains("Family labels")){return null;}
        return text.substring(text.indexOf("Family labels") +
                        "Family labels".length(),
                text.indexOf("Security vendors' analysis")
        ).replaceFirst("\\n", "");
    }
    private static String getDetections(String text){
        return text.substring(
                text.indexOf("Do you want to automate checks") +
                        "Do you want to automate checks".length() + 1
        ).replaceFirst("\\n", "");
    }
    private static TreeMap<String, String> getAVs(String text){  // -> Refer to Help.txt
        TreeMap<String, String> report = new TreeMap<>();
        while (!text.isEmpty()){
            int index = text.indexOf("\n");       // --> for the AV
            if (index == -1){break;}
            String AV = text.substring(0, index);
            text = text.substring(index).trim();
            index = text.indexOf("\n");           // --> for the detection
            if (index == -1){break;}
            String detection = text.substring(0, index);
            text = text.substring(index).trim();
            report.put(AV, detection);
        }
        return report;
    }
    private static String advancedSearch(String text){
        Format.score = text.substring(0, 6).replaceAll("\n", "");
        report.append("Score: ").append(score).append("\n");
        text = cleanTillHash(text);      // --> 1st Clean, Till Hash
        Format.hash = getHash(text);
        report.append("Hash: ").append(hash).append("\n");
        Format.name = getName(text);
        report.append("Name: ").append(name).append("\n");
        Format.size = getSize(text);
        report.append("Size: ").append(size).append("\n");
        text = getDetections(text);
        AVs = getAVs(text);
        report.append("\n");
        report.append("Detections...");
        report.append("\n");
        for (Map.Entry<String, String> entry: AVs.entrySet()){
            report.append(entry.getKey()).append(" ").append("- ")
                    .append(entry.getValue()).append("\n");
        }
        return report.toString();
    }
}